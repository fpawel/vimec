// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type actTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *actTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("act").
func (v *actTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *actTableType) Columns() []string {
	return []string{"act_id", "year", "month", "day", "act_number", "doc_code", "route_sheet", "products_count"}
}

// NewStruct makes a new struct for that view or table.
func (v *actTableType) NewStruct() reform.Struct {
	return new(Act)
}

// NewRecord makes a new record for that table.
func (v *actTableType) NewRecord() reform.Record {
	return new(Act)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *actTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ActTable represents act view or table in SQL database.
var ActTable = &actTableType{
	s: parse.StructInfo{Type: "Act", SQLSchema: "", SQLName: "act", Fields: []parse.FieldInfo{{Name: "ActID", Type: "int64", Column: "act_id"}, {Name: "Year", Type: "int", Column: "year"}, {Name: "Month", Type: "time.Month", Column: "month"}, {Name: "Day", Type: "int", Column: "day"}, {Name: "ActNumber", Type: "int", Column: "act_number"}, {Name: "DocCode", Type: "int", Column: "doc_code"}, {Name: "RouteSheet", Type: "string", Column: "route_sheet"}, {Name: "ProductsCount", Type: "int", Column: "products_count"}}, PKFieldIndex: 0},
	z: new(Act).Values(),
}

// String returns a string representation of this struct or record.
func (s Act) String() string {
	res := make([]string, 8)
	res[0] = "ActID: " + reform.Inspect(s.ActID, true)
	res[1] = "Year: " + reform.Inspect(s.Year, true)
	res[2] = "Month: " + reform.Inspect(s.Month, true)
	res[3] = "Day: " + reform.Inspect(s.Day, true)
	res[4] = "ActNumber: " + reform.Inspect(s.ActNumber, true)
	res[5] = "DocCode: " + reform.Inspect(s.DocCode, true)
	res[6] = "RouteSheet: " + reform.Inspect(s.RouteSheet, true)
	res[7] = "ProductsCount: " + reform.Inspect(s.ProductsCount, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Act) Values() []interface{} {
	return []interface{}{
		s.ActID,
		s.Year,
		s.Month,
		s.Day,
		s.ActNumber,
		s.DocCode,
		s.RouteSheet,
		s.ProductsCount,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Act) Pointers() []interface{} {
	return []interface{}{
		&s.ActID,
		&s.Year,
		&s.Month,
		&s.Day,
		&s.ActNumber,
		&s.DocCode,
		&s.RouteSheet,
		&s.ProductsCount,
	}
}

// View returns View object for that struct.
func (s *Act) View() reform.View {
	return ActTable
}

// Table returns Table object for that record.
func (s *Act) Table() reform.Table {
	return ActTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Act) PKValue() interface{} {
	return s.ActID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Act) PKPointer() interface{} {
	return &s.ActID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Act) HasPK() bool {
	return s.ActID != ActTable.z[ActTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Act) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ActID = int64(i64)
	} else {
		s.ActID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ActTable
	_ reform.Struct = (*Act)(nil)
	_ reform.Table  = ActTable
	_ reform.Record = (*Act)(nil)
	_ fmt.Stringer  = (*Act)(nil)
)

func init() {
	parse.AssertUpToDate(&ActTable.s, new(Act))
}
